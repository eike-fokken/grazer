name: CMake

on:
  pull_request:
    branches: [master]
    types: [synchronize, opened, reopened, ready_for_review]

jobs:
  build:
    # if: github.event.pull_request.draft == false
    strategy:
      matrix:
        name:
        - Linux-GNU
        - Linux-Clang
        - Linux-Clang-libc++
        # - MacOS-Clang
        # - Windows-VisualStudio
        build_type: [ Debug ]
        include:
        - name: Linux-GNU
          compiler: g++-9
          os: ubuntu-18.04
          dep-install: sudo apt-get install -y cmake doxygen graphviz
        - name: Linux-Clang
          compiler: clang++-9
          os: ubuntu-16.04
          dep-install: sudo apt-get install -y cmake doxygen graphviz clang
        - name: Linux-Clang-libc++
          compiler: clang++-9
          os: ubuntu-16.04
          dep-install: sudo apt-get install -y cmake doxygen graphviz clang libc++-dev
          build_with_libcpp: ON
        # - name: MacOS-Clang
        #   os: macos-10.15
        #   compiler: clang++
        # - name: Windows-VisualStudio
        #   os: windows-2019
        #   compiler: msvs
        - name: Release
          os: ubuntu-20.04
          compiler: g++-10
          dep-install: sudo apt-get install -y cmake doxygen graphviz
          build_type: Release


    env:
      # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
      BUILD_TYPE: ${{ matrix.build_type }}
      CXX: ${{ matrix.compiler }}
      CTEST_OUTPUT_ON_FAILURE: 1
      BUILD_WITH_LIBCPP: ${{matrix.build_with_cpp}}
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }} 

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install Dependencies
      run: ${{ matrix.dep-install }}

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE ${{ matrix.generator }} -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_WITH_CPP=$BUILD_WITH_CPP
    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
