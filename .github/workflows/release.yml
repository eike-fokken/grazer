on:
  push:
    branches:
    - "main"
    paths:
    - Version.cmake
name: Release
jobs:
  create-release:
    name: Create_Release
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout_Repository
      uses: actions/checkout@v3

    - name: Get_Version
      id: get_version
      run: |        
        cmake -E make_directory ${{github.workspace}}/build
        VERSION=$(cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release | grep 'grazer-version:' | grep -oE '[0-9\.]+')
        echo ${VERSION}
        echo "::set-output name=version::${VERSION}"
        touch CHANGELOG.md
        changelog="$(cat CHANGELOG.md)"
        changelog="${changelog//'%'/'%25'}"
        changelog="${changelog//$'\n'/'%0A'}"
        changelog="${changelog//$'\r'/'%0D'}"
        echo ::set-output name=changelog::$changelog
      # escaping newlines from changelog cf. https://github.community/t/set-output-truncates-multiline-strings/16852/3

    - name: Create_a_GitHub_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: Release Version ${{ steps.get_version.outputs.version }}
        body: ${{ steps.get_version.outputs.changelog }}

  generate-binaries:
    name: Generate_Binaries 
    needs: create-release

    strategy:
      fail-fast: false
      matrix:
        name:
        - ubuntu-20.04
        - MacOS
        include:
        - name: ubuntu-20.04
          os: ubuntu-20.04
          compiler: clang++-10
          binary-path: /build/src/Grazer/grazer
          dep-install: sudo apt-get install -y cmake clang-10 
        - name: MacOS
          os: macos-latest
          compiler: clang++
          binary-path: /build/src/Grazer/grazer
          dep-install: brew install bash metis ninja; echo "/usr/local/bin" >> $GITHUB_PATH; echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV; echo "FC=gfortran-11" >> $GITHUB_ENV;

    env:
      # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
      CXX: ${{ matrix.compiler }}
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{matrix.os}}

    steps:
    - name: Checkout_the_repository
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install_Dependencies
      run: ${{ matrix.dep-install }}

    - name: Create_Build_Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure_CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config Release --target grazer --parallel 10
    
    - name: Final_Smoke_Test
      run: ${{github.workspace}}${{ matrix.binary-path }} run ./data/basetest && ${{github.workspace}}${{ matrix.binary-path }} run ./data/optimization_test
    
    - name: Upload_CLI_Binary_to_Release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{github.workspace}}${{ matrix.binary-path }}
        asset_name: grazer-${{matrix.os}}-v${{ needs.create-release.outputs.version }}${{ matrix.binary-ending }}
        tag: v${{ needs.create-release.outputs.version }}


  Documentation:
    needs: generate-binaries
    runs-on: ubuntu-20.04
    env:
      # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
      BUILD_TYPE: Debug 
      CXX: g++-9
      CTEST_OUTPUT_ON_FAILURE: 1

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install_Dependencies
      run: sudo apt-get install -y cmake doxygen graphviz texlive-full

    - name: Create_Build_Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure_CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: echo $BUILD_WITH_LIBCPP &&  cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Generate_Documentation
      working-directory: ${{ github.workspace }}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE --target docs --parallel 10
    
    - name: Upload_Doku_to_GitHub_Pages
      uses: JamesIves/github-pages-deploy-action@v4.4.3
      with:
        branch: gh-pages
        folder: build/docs/html
